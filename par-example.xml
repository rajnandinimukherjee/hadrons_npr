<?xml version="2.0"?>
<grid>
  <global>
    <!-- trajectory loop, the trajectory number is appended as a suffix -->
    <!-- to file read an written by modules. It is also part of the     -->
    <!-- RNG seed.                                                      -->
    <trajCounter>
      <start>1000</start>
      <end>1010</end>
      <step>10</step>
    </trajCounter>
    <database>
      <!-- application database (schedule, graph, object catalog, ...) -->
      <applicationDb>app.db</applicationDb>
      <!-- result database (result file catalog) -->
      <resultDb>npr_results.db</resultDb>
      <!-- restore module graph from application DB? -->
      <restoreModules>false</restoreModules>
      <!-- restore memory profile from application DB? -->
      <restoreMemoryProfile>false</restoreMemoryProfile>
      <!-- restore schedule from application DB? -->
      <restoreSchedule>false</restoreSchedule>
      <!-- produce statistics DB? -->
      <makeStatDb>true</makeStatDb>
      <statDbBase>statDb</statDbBase>
      <statDbPeriodMs>50</statDbPeriodMs>
    </database>
    <!-- Define the scheduler, options naive and genetic -->
    <scheduler>
      <schedulerType>naive</schedulerType>
    </scheduler>
    <!-- genetic scheduler parameters -->
    <genetic>
      <!-- population of schedules -->
      <popSize>20</popSize>
      <!-- maximum number of generations -->
      <maxGen>1000</maxGen>
      <!-- stop if memory footprint does no improve for maxCstGen generations -->
      <maxCstGen>100</maxCstGen>
      <!-- mutation rate -->
      <mutationRate>0.1</mutationRate>
    </genetic>
    <!-- run id (is part of seed for random numbers!) -->
    <runId>npr_run_id</runId>
    <!-- output GraphViz file if not empty -->
    <graphFile></graphFile>
    <!-- output schedule file name (deprecated, use DB) -->
    <scheduleFile></scheduleFile>
    <!-- save schedule file? (deprecated, use DB) -->
    <saveSchedule>false</saveSchedule>
    <!-- Resilient IO, reread files after parallel file and try to re-write -->
    <!-- them if checksum test fails. parallelWriteMaxRetry is the number   -->
    <!-- of retry after checksum failure, -1 means no check at all.         -->
    <!-- Unless you have some suspicion your parallel FS or MPI is          -->
    <!-- corrupting files you should probably use -1.                       -->
    <parallelWriteMaxRetry>-1</parallelWriteMaxRetry>
  </global>
  <nprOptions>
    <min_ap2>0.5</min_ap2> <!-- Minmal value of (ap)^2 -->
    <max_ap2>5.0</max_ap2> <!-- Maximal value of  (ap)^2 -->
    <delta_ap2>0.25</delta_ap2> <!-- Momentum sampling frequency in units of (ap)^2 -->
    <QED>false</QED> <!-- Decides whether QED_L corrections to order alpha_em are calculated.-->
    <fourquark>false</fourquark> <!-- Decides whether fourquark vertices are calculated. -->
    <gamma_basis>va_av</gamma_basis> <!-- Basis of fourqaurk vertices to calculate -->
    <outputFolder>npr_data</outputFolder> <!-- Path in which the output is saved. -->
  </nprOptions>
  <gaugeField>
    <gaugeFieldType>Unit</gaugeFieldType> <!-- Type of the gauge field, can be Unit, Nersc or openQcd -->
    <gaugeFieldPath></gaugeFieldPath> <!-- Path to the gauge fields, is ignored if gaugeFieldType Unit is chosen. -->
    <smear>true</smear> <!-- Whether gauge field is stout smeared or not -->
    <steps>3</steps> <!-- Number of stout smearing steps -->
    <rho>0.1</rho> <!-- Stout smearing parameter rho -->
  </gaugeField>
  <action>
    <mass>0.15</mass> <!-- quark mass -->
    <csw>1.2</csw> <!-- clover term coefficient -->
  </action>
  <solver>
    <residual>1e-8</residual> <!-- solver residual -->
    <maxInnerIteration>60000</maxInnerIteration> <!-- inner iteration limit -->
    <maxOuterIteration>100</maxOuterIteration> <!-- outer iteration limit -->
  </solver>
</grid>
